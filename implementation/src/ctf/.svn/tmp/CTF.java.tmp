/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ctf;

import Database.DB;
import crypto.MentalPokerWrapper;
import crypto.PokerKey;
import crypto.RSAWrapper;
import ctf.networking.ListenServer;
import ctf.GUI.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.StringTokenizer;
import networking.Message;
import org.apache.commons.lang.ArrayUtils;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.SecureRandom;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.RSAPrivateKeySpec;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;



/**
 *
 * @author Mohammed & stkerr
 */
public class CTF extends Interface
{
    private ListenServer server;
    private DB database;
    public String IDsFilePath;
    private PokerKey pKey;
    private KeyPair RSAKeyPair;
    private Date RegStart, RegDeadline, VotingDeadline;
    
    /**
     * The CTF constructor when initializes all the internal variables at the CTF side.
     * @param EVotersPath - the path to the eiligible voters file to be added to the database.
     * @param RegStart - the date of the start of the registration period.
     * @param RegDeadline - the date of the deadline of the registration period.
     * @param VotingDeadline - the voting period deadline
     * @throws Exception - if any errors occur.
     */
    public CTF(String EVotersPath, Date RegStart, Date RegDeadline, Date VotingDeadline) throws Exception {
        RSAKeyPair = RSAWrapper.genKeyPair();
        pKey = MentalPokerWrapper.generateKeypair();
        database = new DB();
        database.AddEligVotersToDB(EVotersPath);
        this.RegStart = RegStart;
        this.RegDeadline = RegDeadline;
        this.VotingDeadline = VotingDeadline;
    }

<<<<<<< .mine
    /**
     * Gets the deadline of the registration period.
     * @return Date - deadline of the registration period.
     */
=======
    /**
     * Changes the start of the registration period 
     */
    public void startRegistrationPeriod()
    {
        System.out.println("Here");
        Calendar cal = Calendar.getInstance();
        
        RegStart = new Date();
        
        cal.add(Calendar.DAY_OF_MONTH, 1);
        RegDeadline = cal.getTime();
        
        cal.add(Calendar.DAY_OF_MONTH, 2);
        VotingDeadline = cal.getTime();
    }
    
    /**
     * Starts the voting period
     */
    public void startVotingPeriod()
    {
        Calendar cal = Calendar.getInstance();
        
        RegDeadline = new Date();
        
        cal.add(Calendar.DAY_OF_MONTH, -1);
        RegStart = cal.getTime();
        
        cal.add(Calendar.DAY_OF_MONTH, 5);
        VotingDeadline = cal.getTime();
        
        
    }
    /**
     * Starts the reveal period
     */
    public void startRevealPeriod()
    {
        Calendar cal = Calendar.getInstance();
        
        VotingDeadline = new Date();
        
        cal.add(Calendar.DAY_OF_MONTH, -5);
        RegStart = cal.getTime();
        RegDeadline = cal.getTime();
    }
    
>>>>>>> .r52
    public Date getRegDeadline() {
        return RegDeadline;
    }

    /**
     * Gets the start of the registration period.
     * @return Date - the start of the registration period.
     */
    public Date getRegStart() {
        return RegStart;
    }

    /**
     * Gets the deadline of the voting period.
     * @return Date - deadline of the voting period.
     */
    public Date getVotingDeadline() {
        return VotingDeadline;
    }

<<<<<<< .mine
=======
    public CTF(String EVotersPath, Date RegStart, Date RegDeadline, Date VotingDeadline) throws Exception {
        RSAKeyPair = RSAWrapper.genKeyPair();
        pKey = new PokerKey(new BigInteger("102305074691832500652868793325658345977645070217392683577866422209638437167937"),
                new BigInteger("657230828025924251939170402521181477778124729833912333737194912341322993126033131716575155573271494800001916866611392755648201660337633525124416103130691699314248799955107245886734851482085425756373047123225817705842382673059168351868980786552835511033270072100163682878432820431999605205070784377005630057969010199349831583669324255011032037731020352913308668012653847473022511645727628759574432475425979019749404467964110913346513961737715204184343568429629077598860731014859366868735882949083933540402183731138110075818697231318272099075879670493446590331132141760600809988684633060519344978436953909425551837422650477586185931784050133532503796787275707573253328429197063408653101509399219982631569627549684428689703194703349585383110021985524901504752688553670622551716568862529822612847969527018346621497417840377985212995373309828405908983329238867051241354316041468116646009783218986598490808178146513136109076407190821494279057364258049131632715134546874446331855024756840182609954241737819896958529362403358431044396199894485480806536440669339742235382357541306153121029682811720442277175672606542623551893744092835677910833079488018149721407291009588195801816373653445964783300082610316788160680087910938266991425983779133"),
                MentalPokerWrapper.modulus);
        
        System.out.println("Public " + pKey.getPublicExponent());
        System.out.println("Private " + pKey.getPrivateExponent());
        database = new DB();
        database.AddEligVotersToDB(EVotersPath);
        this.RegStart = RegStart;
        this.RegDeadline = RegDeadline;
        this.VotingDeadline = VotingDeadline;
    }

>>>>>>> .r52
    
    /**
     * This methods runs offline and generate the identifiers, encrypts them under the CTF Pohlig-Hellman
     *  encryption key and then finally stores them in a file.
     * The number of identifiers is totally based on the number of registered voters in the system.
     *  The probability that and identifier can occur should be roughly 1/2^128, and a collision to
     *  occur is 1/2^80.
     * @param num - The number of registered voters in the system.
     * @param path - The path of the file where the identifiers will be stored.
     * @throws Exception
     */
    public void generateIDs(int num, String path) throws Exception {
        try {
            //Check if the path has been supplied
            if (path == null) {
                throw new Exception("File Path has not been supplied");
            }
            this.IDsFilePath = path;

            //Calculate the valure of 2^80 and multiply it with num.
            BigInteger I_num = BigInteger.ONE.add(BigInteger.ONE);
            I_num.pow(80);
            I_num.multiply(BigInteger.valueOf(num));

            //Open and prepare the file.
            Formatter writer1 = new Formatter(path);

            String plainIDsPath = "PlainIDs.txt";
            Formatter writer2 = new Formatter(plainIDsPath);
            
            //Generate a random number, encrypt it and then store it in a file.
            BigInteger count = BigInteger.ONE;
            BigInteger temp = null;
            BigInteger tempCipher = null;
            while (count.compareTo(I_num) != 0) {
                //generate the random identifier.
                temp = new BigInteger(256,new SecureRandom());

                //writing it to the decrypted format
                writer2.format("%s\r\n", temp.toString());

                //encrypt it.
                tempCipher = MentalPokerWrapper.encrypt(temp, pKey.getPublicExponent());

                //write it to the file.
                writer1.format("%s\r\n", tempCipher.toString());

                //Increment the counter.
                count.add(BigInteger.ONE);
            }
            writer1.close();
            writer2.close();

            //Save all the IDs in the database.
            database.AddIDsToDB(plainIDsPath);

            File f = new File(plainIDsPath);
            f.delete();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public byte [] OnPubRegVotersFile(String path) throws Exception {
        //Opening the file.
        if (path == null)
            throw new Exception("File Path has not been supplied");
        File rVoters = new File(path);

        if (!rVoters.exists())
            throw new Exception("File cannot be found");
        if (!rVoters.isFile())
            throw new Exception("The path doean't point to a file");
        if (!rVoters.canRead())
            throw new Exception("The file at " + path + " cannot be read");

        //Reading the contents of the file
        Scanner reader = new Scanner(rVoters);
        FileInputStream fStream;

        return null;
    }

    /**
     * This methods runs offline and generate the identifiers, encrypts them under the CTF Pohlig-Hellman
     *  encryption key and then finally stores them in a file.
     * The number of identifiers is totally based on the number of registered voters in the system.
     *  The probability that and identifier can occur should be roughly 1/2^128, and a collision to
     *  occur is 1/2^80.
     * @param num - The number of registered voters in the system.
     * @param path - The path of the file where the identifiers will be stored.
     * @throws Exception
     */
    public void generateIDsTest(int num, String path) throws Exception {
        try {
            //Check if the path has been supplied
            if (path == null) {
                throw new Exception("File Path has not been supplied");
            }
            this.IDsFilePath = path;

            //Calculate the valure of 2^80 and multiply it with num.
            BigInteger I_num = BigInteger.ONE.add(BigInteger.ONE);
            I_num = I_num.pow(6);
            I_num = I_num.multiply(BigInteger.valueOf(num));

            //Open and prepare the file.
            Formatter writer1 = new Formatter(path);

            String plainIDsPath = "PlainIDs.txt";
            Formatter writer2 = new Formatter(plainIDsPath);

            //Generate a random number, encrypt it and then store it in a file.
            BigInteger count = BigInteger.ONE;
            BigInteger temp = null;
            BigInteger tempCipher = null;
            while (count.compareTo(I_num) < 0) {
                System.out.println("Here");
                //generate the random identifier.
                temp = new BigInteger(256,new SecureRandom());

                //writing it to the decrypted format
                writer2.format("%s\r\n", temp.toString());

                //encrypt it.
                tempCipher = MentalPokerWrapper.encrypt(temp, pKey.getPublicExponent());

                //write it to the file.
                writer1.format("%s\r\n", tempCipher.toString());

                //Increment the counter.
                count = count.add(BigInteger.ONE);
            }
            writer1.close();
            writer2.close();

            //Save all the IDs in the database.
            database.AddIDsToDB(plainIDsPath);

            File f = new File(plainIDsPath);
            f.delete();

        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Starts and configures all the networking for this server
     * and binds it to a hostname and port number.
     *
     * @param host The hostname that this server should bind to
     * @param port The port that this server should listen to
     */
    public void startNetworking(String host, int port)
    {
        server = new ListenServer(host, port);
        server.start();
    }

    /**
     * This removes the first message from the incoming
     * message queue. This call will block and wait if there
     * is no message in the queue.
     *
     * @return The front of the message queue.
     */
    public Message receive()
    {
        return server.receive();
    }

    /**
     * Enqueues a message to the given client. This will
     * not necessarily send it right away, but place it
     * in the queue of messages and returns.
     *
     * @param message The contents of the message to send
     * @param ID The client ID to send this message to
     */
    public void send(String message, int ID)
    {
        server.send(new Message(message, ID));
    }

    /**
     * This method is called by the CTF when it receives a voter registration request.
     * @param SSN - the SSN of the voter requesting to register for voting
     * @return true - if the registration was successful and,
     * @return false - if the registration was unsuccessful.
     */
    public byte [] OnRegReq(String SSN) throws Exception {
            if (SSN == null)
                throw new Exception("The voter's SSN has not been supplied");
            if (database.RegVoter(SSN)) {
                //Creating the body of the receipt.
                byte [] receipt_body;
                byte deli = 0; //This is the deliminitor detween the ID and the Encrypted Vote.
                receipt_body = ArrayUtils.add(SSN.getBytes(),deli);
                receipt_body = ArrayUtils.add(receipt_body,deli);
                receipt_body = ArrayUtils.add(receipt_body,deli);
                receipt_body = ArrayUtils.addAll(receipt_body, new Date().toString().getBytes());
                return RSAWrapper.sign(SSN.getBytes(), (RSAPrivateKey) RSAKeyPair.getPrivate());
            }
            else
                return null;
    }

    /**
     * This is called by the CTF when sending the list of identifiers to the client. It first checks that the user has registered.
     * @param SSN - the user's SSN who wants to receive the list of Is.
     * @return The path to the file of identifiers list, if the user is registered.
     * @return NULL - otherwise.
     */
    public String SendingIs(String SSN) {
        try {
            if (SSN == null)
                throw new Exception("The user's SSN has not been supplied");

            if (!database.IsReg(SSN))
                throw new Exception("The user with SSN = " + SSN + " is not registred");
            return this.IDsFilePath;
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * This is called when the client sends a request to the CTF to decrypt the double encrypted ID.
     * @param EncID - the double encrypted identifier.
     * @return The decryption of the ID.
     * @return NULL - if anything is wrong
     */
    public BigInteger OnIDDecReq(BigInteger EncID) {
        try {
            if (EncID == null)
                throw new Exception("The encrypted ID has not been supplied");
            System.out.println("Decrypting " + EncID);
            return MentalPokerWrapper.decrypt(EncID, pKey.getPrivateExponent());
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        
    }

    /**
     * This is called by the CTF when it receives a request to record a vote for a given voter.
     * @param id - The ID of the voter.
     * @param EncVote - The voter's encrypted vote.
     * @return The receipt of the vote as a signature of id||EncVote
     * @return NULL - if there was any error.
     */
    public byte [] OnReceivingVote(BigInteger id, byte[] EncVote) throws Exception {
        //Check if the data has been supplied
        if (id == null || EncVote == null)
            throw new Exception("The ID or the vote has not been supplied");

        //Check if the ID is valid
        if (!database.IsValidID(id))
            throw new Exception("The ID is not valid.");

        //Check if there is any conflic in the supplied ID
        if (database.IsIDDupl(id)) {
            System.out.println("The ID has been used by another voter.");
            return null;
        }

        //Adding the vote to the database.
        database.addVote(id, EncVote);

        //Creating the body of the receipt.
        byte [] receipt_body;
        byte deli = 0; //This is the deliminitor detween the ID and the Encrypted Vote.
        receipt_body = ArrayUtils.add(id.toByteArray(),deli);
        receipt_body = ArrayUtils.add(receipt_body,deli);
        receipt_body = ArrayUtils.add(receipt_body,deli);
        receipt_body = ArrayUtils.addAll(receipt_body, EncVote);

        //Signing the receipt body.
        byte [] receipt;
        receipt = RSAWrapper.sign(receipt_body, (RSAPrivateKey) RSAKeyPair.getPrivate());

        //Return the key.
        return receipt;
    }

    /**
     * This is called by the CTF when it receives a request to change the vote a given voter.
     * @param id - The ID of the voter.
     * @param EncVote - The voter's new encrypted vote.
     * @return The receipt of the vote as a signature of id||EncVote
     * @return NULL - if there was any error.
     */
    public byte [] OnReceivingVoteChangeReq(BigInteger id, byte[] EncVote) throws Exception {
        //Check if the data has been supplied
        if (id == null || EncVote == null)
            throw new Exception("The ID or the vote has not been supplied");

        //Check if the ID is valid
        if (!database.IsValidID(id))
            throw new Exception("The ID is not valid.");

        //Has Voted
        if (!database.HasVoted(id))
            return null;

        //Adding the vote to the database.
        database.ChangeVote(id, EncVote);

        //Creating the body of the receipt.
        byte [] receipt_body;
        byte deli = 0; //This is the deliminitor detween the ID and the Encrypted Vote.
        receipt_body = ArrayUtils.add(id.toByteArray(),deli);
        receipt_body = ArrayUtils.add(receipt_body,deli);
        receipt_body = ArrayUtils.add(receipt_body,deli);
        receipt_body = ArrayUtils.addAll(receipt_body, EncVote);

        //Signing the receipt body.
        byte [] receipt;
        receipt = RSAWrapper.sign(receipt_body, (RSAPrivateKey) RSAKeyPair.getPrivate());

        //Return the key.
        return receipt;
    }

    /**
     * This is called when the CTF receives a voter's decryption key.
     * @param id - the voter's ID
     * @param PriKey - The decryption key.
     */
    public void OnReceivingVoteDecKey(BigInteger id, RSAPrivateKey PriKey, String cipherblock) throws Exception {
        //Checking that the ID and voter's Private key has been supplied
        if (id == null || PriKey == null)
            throw new Exception("The ID or the Private Key has not been supplied.");

        //Checking that the voter has voted
        if (!database.HasVoted(id))
            throw new Exception("The voter with ID: " + id.toString() + " didn't vote before.");

        //Storing the decryption key in the database.
        database.InsertDecKey(id, PriKey, cipherblock);
    }

    /**
     * This is called by the CTF to check whether a voter is eligible to vote or not
     * @param SSN - the voter's SSN.
     * @return True - if the voter is eligible.
     * @return False - if the voter is not eligible.
     * @throws Exception if any error occurs.
     */
    public boolean IsEligVoter(String SSN) throws Exception
    { return database.IsElig(SSN); }

    /**
     * This is called by the CTF to check whether a voter has registered.
     * @param SSN - the voter's SSN.
     * @return True - if the voter has registered.
     * @return False - if the voter has NOT registered.
     * @throws Exception if any error occurs.
     */
    public boolean HasReg(String SSN) throws Exception
    { return database.IsReg(SSN); }

    /**
     * This method is called by the CTF to parse the messages received from the voter.
     * @param message - The message to be parsed.
     * @return The list containing the command and its parameter.
     */
    public ArrayList ParseMessage(Message message) {
        ArrayList commandList = new ArrayList();
        StringTokenizer sToken = new StringTokenizer(message.getContents());
        while (sToken.hasMoreTokens())
            commandList.add(sToken.nextToken("=?&"));
        return commandList;
    }

    public static void main(String[] args) {
        try {
            CTF ctf = new CTF("/Users/stkerr/NetBeansProjects/userlist.txt", new Date(), new Date(), new Date());

//            ctf.generateIDsTest(2, "/Users/stkerr/NetBeansProjects/id.txt");
            
            //Display the GUI
            ctf.configGUI();
            ctf.setVisible(true);

            System.out.println("About to start networking");
            ctf.startNetworking("127.0.0.1", 4444);
            System.out.println("Started");

            //varaibles needed inside the while loop.
            Message message;
            String com, id, exp, mod, name, ssn;
            byte [] cipher, receipt, symkey, iv;
            KeyFactory keyFactory;
            RSAPrivateKeySpec RSASpec;
            RSAPrivateKey RSAVotePri;
            String response = null;
            ArrayList command;
            BigInteger ID, EXP, MOD;
            long otp;
            Date TimeRec;
            SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, MMM dd, yyyy hh:mm aaa");

            //Data Structure Storing the OTP values.
            ArrayList<Integer> sessionIDs = new ArrayList<Integer>();
            ArrayList<Long> OTPValues = new ArrayList<Long>();

            while(true) {
                message = ctf.receive();
                TimeRec = new Date();
                System.out.println("Server Received: " + message + ". At: " + dateFormat.format(TimeRec.getTime()));
                command = ctf.ParseMessage(message);

                //Check if the command was empty
                if (command.isEmpty())
                    continue;

                //Get the command
                com = command.get(0).toString();

                //Perform the appropriate action
                if (com.equalsIgnoreCase("REVEALVOTE")) {
                    try {
                        //make sure that this is after the end of the voting peroid first.
                        if (TimeRec.before(ctf.getVotingDeadline())) {
                            response = "REVEALRESPONSE?STATUS={FAIL:Sorry, you cannot reveal your vote before the voting deadline on: " + dateFormat.format(ctf.getVotingDeadline()) + "}";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        id = command.get(2).toString();
                        exp = command.get(4).toString();
                        mod = command.get(6).toString();

                        ID = new BigInteger(id);
                        EXP = new BigInteger(exp);
                        MOD = new BigInteger(mod);

                        //Create the private key from exp and mod
                        keyFactory = KeyFactory.getInstance("RSA", "BC");
                        RSASpec = new RSAPrivateKeySpec(MOD,EXP);
                        RSAVotePri = (RSAPrivateKey) keyFactory.generatePrivate(RSASpec);

                        //Storing the information in the database.
                        ctf.OnReceivingVoteDecKey(ID, RSAVotePri, "");

                        //Create and send the response
                        response = "REVEALRESPONSE?STATUS={ACCEPT:Your decryption key has been saved}";
                        ctf.send(response, message.getID());
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                        response = "REVEALRESPONSE?STATUS={FAIL:Your decryption key has NOT been saved. " + e.getMessage() + "}" ;
                        ctf.send(response, message.getID());
                    }
                }
                else if (com.equalsIgnoreCase("IDENROLL")) {
                    try {
                        //Making sure that this has been done after a successful Registeration command.
                        if (!sessionIDs.contains(new Integer(message.getID()))) {
                            response = "IDRESPONSE?STATUS={FAIL:You must register before getting an ID";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Extracting the parameters
                        id = command.get(2).toString();
                        ID = new BigInteger(id);

                        //Decrypting the ID.
                        ID = ctf.OnIDDecReq(ID);

                        //Create and send the response
                        response = "IDRESPONSE?STATUS={ACCEPT:The ID is decrypted and attached}&ID=" + ID.toString();
                        ctf.send(response, message.getID());

                        //deleting the session ID from the list.
                        sessionIDs.remove(new Integer(message.getID()));
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                        response = "IDRESPONSE?STATUS={FAIL:The ID cannot be decrypted. Error: " + e.getMessage() + "}&ID=0";
                        ctf.send(response, message.getID());
                    }
                }
                else if (com.equalsIgnoreCase("CHECKVALID")) {
                    try {
                        //Extracting the command parameter.
                        name = command.get(2).toString();
                        ssn = command.get(4).toString();

                        //Checking if the user is valid.
                        if (ctf.IsEligVoter(ssn))
                            response = "CHECKRESPONSE?STATUS={ACCEPT:You are an eligible voter}";
                        else
                            response = "CHECKRESPONSE?STATUS={FAIL:You are NOT an eligible voter}";
                        ctf.send(response, message.getID());
                    }
                    catch (Exception e) {
                        response = "CHECKRESPONSE?STATUS={FAIL:The command cannot be executed. Error: " + e.getMessage() + "}";
                        ctf.send(response, message.getID());
                    }
                }
                else if (com.equalsIgnoreCase("REGISTERREQ")) {
                    try {
                        //Check that this message has been received before the registeration deadline and after the Registeration start.
                        if (TimeRec.before(ctf.getRegStart())) {
                            response = "REGRESPONSE?STATUS={FAIL:Sorry, the registeration has not been opened yet, it starts on: " + dateFormat.format(ctf.getRegStart()) + "}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }
                        if (TimeRec.after(ctf.getRegDeadline())) {
                            response = "REGRESPONSE?STATUS={FAIL:Sorry, you have missed the registeration period. It ended on : " + dateFormat.format(ctf.getRegDeadline()) + "}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Extracting the parameters.
                        name = command.get(2).toString();
                        ssn = command.get(4).toString();

                        //Registering the user
                        receipt = ctf.OnRegReq(ssn);
                        if ( receipt != null) {
                            //Signing the receipt body.
                            response = "REGRESPONSE?STATUS={ACCEPT:Congratulations, you have been registred.}&RECEIPT=" + new BigInteger(receipt);
                        }
                        else
                            response = "REGRESPONSE?STATUS={FAIL:Sorry, but you are not eligible to regsiter.}&RECEIPT=0";
                        ctf.send(response, message.getID());

                        //Adding the user session to the Array List
                        sessionIDs.add(new Integer(message.getID()));
                    }
                    catch (Exception e) {
                        response = "CHECKRESPONSE?STATUS={FAIL:Sorry, an error has occured. Please try again. Error: " + e.getMessage() + "}&RECEIPT=0";
                        ctf.send(response, message.getID());
                    }
                }
                else if (com.equalsIgnoreCase("SUBMITVOTE")) {
                    try {
                        //Checking that this is after the registeration deadline and before the voting deadline.
                        if (TimeRec.before(ctf.getRegDeadline())) {
                            response = "SUBMITRESPONSE?STATUS={FAIL:Sorry, but the voting period hasn't started yet. It starts at: " + dateFormat.format(ctf.getRegDeadline()) + ".}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }
                        if (TimeRec.after(ctf.getVotingDeadline())) {
                            response = "SUBMITRESPONSE?STATUS={FAIL:Sorry, but you have missed the voting period ended on: " + dateFormat.format(ctf.getVotingDeadline()) + ".}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Extracting the paramters.
                        id = command.get(2).toString();
                        System.out.println(command.get(4).toString());
                        cipher = command.get(4).toString().getBytes();
                        symkey = command.get(6).toString().getBytes();
                        iv = command.get(8).toString().getBytes();
                        
                        ID = new BigInteger(id);

                        //Storing the vote in the database
                        receipt = ctf.OnReceivingVote(ID, cipher);
                        if (receipt == null) {
                            //Generate the OTP and save it.
                            otp = new SecureRandom().nextLong();
                            OTPValues.add(otp);

                            //Generate the response.
                            response = "SUBMITRESPONSE?STATUS={FAIL:Sorry, but the ID you're using has been used by another user.}&OTP=" + String.valueOf(otp) ;
                        }
                        else
                            response = "SUBMITRESPONSE?STATUS={ACCEPT:Your vote has been saved}&RECEIPT=" + new BigInteger(receipt);
                        ctf.send(response, message.getID());
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                        response = "SUBMITRESPONSE?STATUS={FAIL:Sorry, but your vote has not been counted. Error:" + e.getMessage() + ".}&RECEIPT=0";
                        ctf.send(response, message.getID());
                    }
                }
                else if (com.equalsIgnoreCase("PROTEST")) {
                    try {
                        //TODO: what to do when the user protests.
                    }
                    catch (Exception e) {
                        ;
                    }
                }
                else if (com.equalsIgnoreCase("CHANGEREQ")) {
                    try {
                        //Checking that this is after the registeration deadline and before the voting deadline.
                        if (TimeRec.before(ctf.getRegDeadline())) {
                            response = "CHANGERESPONSE?STATUS={FAIL:Sorry, but the vorint period hasn't started yet. It strats at: " + dateFormat.format(ctf.getRegDeadline()) + ".}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }
                        if (TimeRec.after(ctf.getVotingDeadline())) {
                            response = "CHANGERESPONSE?STATUS={FAIL:Sorry, but you have missed the voting period ended on: " + dateFormat.format(ctf.getVotingDeadline()) + ".}&RECEIPT=0";
                            ctf.send(response, message.getID());
                            continue;
                        }
                        
                        //Extracting the parameters.
                        id = command.get(2).toString();
                        cipher = command.get(4).toString().getBytes();
                        
                        
                        ID = new BigInteger(id);

                        //Submitting the change request to the CTF.
                        receipt = ctf.OnReceivingVoteChangeReq(ID, cipher);

                        if (receipt == null)//The voter didn't vote before.
                            response = "CHANGERESPONSE?STATUS={FAIL:Sorry, but you haven't voted before.}&RECEIPT=0";
                        else
                            response = "CHANGERESPONSE?STATUS={ACCEPT:Your vote has been changed successfully}&RECEIPT=" + new BigInteger(receipt);
                        ctf.send(response, message.getID());
                    }
                    catch (Exception e) {
                        response = "CHANGERESPONSE?STATUS={FAIL:Sorry, your vote couldn't be changed. Error: " + e.getMessage() + ".}&RECEIPT=0";
                    }
                }
                else if (com.equalsIgnoreCase("REOBTAINREQ")) {
                    try {
                        //Check that this message has been received before the voting deadline.
                        if (TimeRec.after(ctf.getVotingDeadline())) {
                            response = "REOBTAINRESPONSE?STATUS={FAIL:Sorry, you have missed the voting deadline ended on: " + dateFormat.format(ctf.getVotingDeadline()) + "}";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Extracting the parameters.
                        name = command.get(2).toString();
                        ssn = command.get(4).toString();
                        otp = Long.parseLong(command.get(6).toString().trim());

                        //Check that the user is eligible to vote.
                        if (!ctf.IsEligVoter(ssn)) {
                            response = "REOBTAINRESPONSE?{FAIL:You are not eligible to vote.}";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Check if the user has regsitered
                        if (!ctf.HasReg(ssn)) {
                            response = "REOBTAINRESPONSE?{FAIL:You have not regsitered before. You should regsiter to obtain an ID.}";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        //Check that the OTP is a valid one.
                        if (!OTPValues.contains(otp)) {
                            response = "REOBTAINRESPONSE?{FAIL:You didn't have the correct OTP value.}";
                            ctf.send(response, message.getID());
                            continue;
                        }

                        response = "REOBTAINRESPONSE?{ACCEPT:You can successfully reobtain an ID.}";
                        ctf.send(response, message.getID());

                        //Removing the OTP from the list.
                        OTPValues.remove(otp);
                    }
                    catch (Exception e) {
                        response = "REOBTAINRESPONSE?STATUS={FAIL:The reobtain process has an error. Error: " + e.getMessage() + "}";
                        ctf.send(response, message.getID());
                    }
                }
                else {
                    System.out.println("The command received has not been formated properly");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getMessage());
        }
    }
}
